<?php

/**
 * Container for View Placeholders
 * 
 * @author Teppo Koivula <teppo.koivula@gmail.com>
 * @version 1.0.0
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 */
class ViewPlaceholders {
    
    /**
     * The Page instance associated with current placeholders object
     * 
     */
    protected $page;
    
    /**
     * Directory containing view scripts
     * 
     */
    protected $scripts;
    
    /**
     * Template extension
     * 
     */
    protected $ext;

    /**
     * Container for data
     * 
     */
    protected $data = array();
    
    /**
     * Constructor method
     * 
     * @param Page $page
     * @param string $scripts
     * @param string $ext
     * @throws Exception if scripts directory is missing or unreadable
     * @throws Exception if invalid format is used for template extension
     */
    public function __construct(Page $page, $scripts, $ext) {
        if (!is_dir($scripts)) {
            throw new Exception("Missing or unreadable scripts directory");
        }
        if (!is_string($ext) || basename($ext) != $ext || strpos($ext, ".") !== 0) {
            throw new Exception("Invalid format for template extension");
        }
        $this->page = $page;
        $this->scripts = $scripts;
        $this->ext = $ext;
    }
    
    /**
     * Return content from a named placeholder slot or markup generated by
     * rendering page with a view script matching the placeholder slot name
     * 
     * @param string $key
     * @return mixed
     */
    public function __get($key) {
        $return = isset($this->data[$key]) ? $this->data[$key] : null;
        if (is_null($return) && ($basekey = basename($key)) == $key) {
            if (is_file($this->scripts . $basekey . $this->ext)) {
                $return = $this->page->layout('')->view($key)->render();
            }
        }
        return $return;
    }

    /**
     * Store values to the protected $data array
     * 
     * @param string $key
     * @param mixed $value
     * @return ViewPlaceholders
     */
    public function __set($key, $value) {
        $this->data[$key] = $value;
        return $this;
    }
    
}
